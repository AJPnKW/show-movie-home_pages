<# ==============================================================
 Script : validate_and_fix_pages.ps1
 Goal   : Enforce correct GitHub Pages structure for /docs + Architect theme
 Author : ChatGPT for Andrew J. Pearen
 Notes  : Idempotent. Creates backups before modifying HTML files.
 Usage  : Right-click → Run with PowerShell (from repo root)
 ============================================================== #>

param(
  [string]$RepoRoot = $(if ($PSScriptRoot) { $PSScriptRoot } else { (Get-Location).Path })
)

$ErrorActionPreference = "Stop"
$stamp   = Get-Date -Format "yyyyMMdd_HHmmss"
$logsDir = Join-Path $RepoRoot "logs"
if (-not (Test-Path -LiteralPath $logsDir)) { New-Item -ItemType Directory -Path $logsDir | Out-Null }
$log    = Join-Path $logsDir "validate_and_fix_pages_$stamp.log"
function Log { param([string]$m) $m | Tee-Object -FilePath $log -Append }

$docs = Join-Path $RepoRoot "docs"
if (-not (Test-Path -LiteralPath $docs)) { throw "ERROR: /docs folder not found at: $docs" }

Log "==============================================================="
Log "RepoRoot : $RepoRoot"
Log "Docs     : $docs"
Log "LogFile  : $log"
Log "Start    : $(Get-Date)"
Log "==============================================================="

# 1) Remove /docs/.nojekyll if present
$nojekyll = Join-Path $docs ".nojekyll"
if (Test-Path -LiteralPath $nojekyll) {
  Remove-Item -LiteralPath $nojekyll -Force
  Log "FIX  : Removed /docs/.nojekyll"
} else {
  Log "OK   : /docs/.nojekyll not present"
}

# 2) Ensure /docs/_config.yml with theme: architect
$config = Join-Path $docs "_config.yml"
$configWanted = @"
theme: architect
title: Shows • Home
"@
if (Test-Path -LiteralPath $config) {
  $cfg = Get-Content -LiteralPath $config -Raw
  if ($cfg -notmatch 'theme:\s*architect') {
    Set-Content -LiteralPath $config -Value $configWanted -Encoding UTF8
    Log "FIX  : Updated _config.yml with theme: architect"
  } else {
    Log "OK   : _config.yml already has theme: architect"
  }
} else {
  Set-Content -LiteralPath $config -Value $configWanted -Encoding UTF8
  Log "FIX  : Created /docs/_config.yml"
}

# 3) Ensure /docs/index.md with front matter (layout: default)
$indexMd = Join-Path $docs "index.md"
$indexWanted = @"
---
layout: default
title: Shows • Home
---

<!-- Autogenerated or hand-edited index page -->
"@
if (Test-Path -LiteralPath $indexMd) {
  $idx = Get-Content -LiteralPath $indexMd -Raw
  if ($idx -notmatch '---\s*[\s\S]*layout:\s*default') {
    Set-Content -LiteralPath $indexMd -Value $indexWanted -Encoding UTF8
    Log "FIX  : Rewrote /docs/index.md with required front matter"
  } else {
    Log "OK   : /docs/index.md has front matter"
  }
} else {
  Set-Content -LiteralPath $indexMd -Value $indexWanted -Encoding UTF8
  Log "FIX  : Created /docs/index.md"
}

# 4) Add front matter to each .html in /docs (except index.html)
$htmlFiles = Get-ChildItem -LiteralPath $docs -Filter *.html -File -ErrorAction Stop `
             | Where-Object { $_.Name -ne 'index.html' }

foreach ($f in $htmlFiles) {
  $raw = Get-Content -LiteralPath $f.FullName -Raw
  $hasFM = $false
  # Consider front matter present if file starts with '---' in first ~300 chars
  $head = $raw.Substring(0, [Math]::Min($raw.Length, 300))
  if ($head -match '^\s*---\s*[\s\S]*?---') { $hasFM = $true }

  if (-not $hasFM) {
    $titleMatch = [regex]::Match($raw, '(?is)<\s*title\s*>\s*(.*?)\s*<\s*/\s*title\s*>')
    $title = if ($titleMatch.Success) { $titleMatch.Groups[1].Value.Trim() } else { $f.BaseName }
    $frontMatter = @"
---
layout: default
title: $title
---
"@
    $backup = $f.FullName + ".bak_$stamp"
    Copy-Item -LiteralPath $f.FullName -Destination $backup -Force
    Set-Content -LiteralPath $f.FullName -Value ($frontMatter + "`r`n" + $raw) -Encoding UTF8
    Log ("FIX  : Added front matter to {0} (backup: {1})" -f $f.Name, [IO.Path]::GetFileName($backup))
  } else {
    Log ("OK   : {0} already has front matter" -f $f.Name)
  }
}

Log "---------------------------------------------------------------"
Log "DONE. Commit & push to 'main' then check Pages:"
Log "  https://ajpnkw.github.io/show-movie-home_pages/"
Log "End     : $(Get-Date)"
Log "---------------------------------------------------------------"

Write-Host ""
Write-Host "Finished. Log saved to:" $log
[void](Read-Host "Press Enter to close")
