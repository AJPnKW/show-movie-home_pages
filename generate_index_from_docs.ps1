<# ======================================================================
 Script Name : generate_index_from_docs.ps1
 Purpose     : Scan /docs for *.html (except index.html) and build a themed index.md
 Author      : ChatGPT (for Andrew J. Pearen)
 Version     : 1.0.0
 Created     : 2025-10-01
 Tested On   : Windows 11 (PowerShell 5/7)

 BEHAVIOR:
 - Looks in <RepoRoot>\docs for *.html (excludes index.html).
 - Extracts <title>...</title> for display text (fallback: prettified filename).
 - Writes /docs/index.md with Jekyll front matter (layout: default).
 - Logs to <RepoRoot>\logs\generate_index_from_docs_YYYYMMDD_HHMMSS.log.
 - Does NOT touch .nojekyll. (You removed it already for Jekyll.)

 USAGE:
 - Run via the provided BAT launcher, or:
   pwsh -File .\generate_index_from_docs.ps1 -RepoRoot "C:\path\to\repo"

 ====================================================================== #>

param(
  [string]$RepoRoot = $(if ($PSScriptRoot) { $PSScriptRoot } else { Split-Path -Parent $MyInvocation.MyCommand.Path })
)

# --- Setup & logging ---
$ErrorActionPreference = "Stop"
$stamp   = Get-Date -Format "yyyyMMdd_HHmmss"
$logsDir = Join-Path $RepoRoot "logs"
if (-not (Test-Path -LiteralPath $logsDir)) { New-Item -ItemType Directory -Path $logsDir | Out-Null }
$logFile = Join-Path $logsDir "generate_index_from_docs_$stamp.log"

function Log { param([string]$m) $m | Tee-Object -FilePath $logFile -Append }

$docs = Join-Path $RepoRoot "docs"
if (-not (Test-Path -LiteralPath $docs)) {
  Log "ERROR: docs folder not found at: $docs"
  throw "Missing docs folder."
}

Log "==============================================================="
Log "Script      : generate_index_from_docs.ps1"
Log "RepoRoot    : $RepoRoot"
Log "Docs        : $docs"
Log "LogFile     : $logFile"
Log "Start Time  : $(Get-Date)"
Log "==============================================================="

# --- Collect HTML pages (excluding index.html) ---
$pages = Get-ChildItem -LiteralPath $docs -Filter *.html -File -ErrorAction Stop |
         Where-Object { $_.Name -ne 'index.html' }

if (-not $pages) {
  Log "WARN: No *.html pages found in /docs (other than index.html)."
}

# --- Helper: pretty title from filename if needed ---
function Get-PrettyTitleFromName {
  param([string]$fileName)
  $base = [System.IO.Path]::GetFileNameWithoutExtension($fileName)
  $base = $base -replace '[_\-]+',' '            # underscores/hyphens -> space
  $base = $base.Trim()
  # Title Case-ish
  return ( -join ($base.ToLower().Split(' ') | ForEach-Object { if($_){ $_.Substring(0,1).ToUpper()+$_.Substring(1) } }) )
}

# --- Extract titles + build items ---
$items = @()
foreach ($f in $pages | Sort-Object Name) {
  try {
    $content = Get-Content -LiteralPath $f.FullName -Raw
    $m = [regex]::Match($content, '(?is)<\s*title\s*>\s*(.*?)\s*<\s*/\s*title\s*>')
    if ($m.Success -and $m.Groups[1].Value.Trim()) {
      $title = $m.Groups[1].Value.Trim()
    } else {
      $title = Get-PrettyTitleFromName -fileName $f.Name
    }
    $rel = "./$($f.Name)" # relative link from /docs/index.md
    $items += [PSCustomObject]@{ Name=$f.Name; Title=$title; Link=$rel }
    Log ("FOUND: {0}  ->  {1}" -f $f.Name, $title)
  } catch {
    Log ("ERROR reading {0}: {1}" -f $f.Name, $_.Exception.Message)
  }
}

# --- Build index.md with front matter (Architect theme wraps layout: default) ---
$frontMatter = @(
  "---",
  "layout: default",
  "title: Shows â€¢ Home",
  "---",
  ""
) -join "`n"

$bodyHeader = @"
<!-- Auto-generated by generate_index_from_docs.ps1 on $(Get-Date -Format "yyyy-MM-dd HH:mm:ss") -->
<p><em>This page lists all HTML show pages in <code>/docs</code>.</em></p>
<ul>
"@

$bodyItems = ($items | ForEach-Object { "  <li><a href=""$($_.Link)"">$($_.Title)</a></li>" }) -join "`n"
if (-not $bodyItems) { $bodyItems = "  <li><em>No pages found.</em></li>" }

$bodyFooter = @"
</ul>
"@

$indexMD = $frontMatter + $bodyHeader + $bodyItems + "`n" + $bodyFooter

# --- Write index.md ---
$indexPath = Join-Path $docs "index.md"
$indexMD | Out-File -FilePath $indexPath -Encoding UTF8 -Force
Log ("WRITE: {0}" -f $indexPath)

Log "---------------------------------------------------------------"
Log "Done. Review the index, commit & push to main."
Log "Pages will rebuild at: https://ajpnkw.github.io/show-movie-home_pages/"
Log "End Time    : $(Get-Date)"
Log "---------------------------------------------------------------"

# Keep visible when run directly
if ($Host.Name -notlike "*Visual Studio*") {
  [void](Read-Host "Press Enter to close")
}
